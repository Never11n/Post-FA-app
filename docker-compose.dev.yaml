version: '3.8'

services:
  user-service:
    build:
      context: .
      dockerfile: user.Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./user_service:/usr/src/app/user_service
    depends_on:
      user-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started


  user-db:
    image: postgres:16
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./user-db-data:/var/lib/postgresql/data

  post-service:
    build:
      context: .
      dockerfile: post.Dockerfile
    ports:
      - "8001:8000"
    env_file:
      - .env
    volumes:
      - ./post_service:/usr/src/app/post_service


  post-db:
    image: postgres:16
    environment:
      POSTGRES_DB: post_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - ./post-db-data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:4
    ports:
      - "5672:5672"
      - "15672:15672"

  email-worker:
    build:
      context: .
      dockerfile: email_worker.Dockerfile
    command: [ "python", "email_worker.py" ]
    depends_on:
      - rabbitmq

volumes:
  user-db:
  user-service:
  post-db:
  post-service: